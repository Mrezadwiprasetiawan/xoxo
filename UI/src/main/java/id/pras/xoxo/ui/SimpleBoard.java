package id.pras.xoxo.ui;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.view.MotionEvent;
import android.view.View;
import id.pras.xoxo.logic.Evaluator;

/**
 * Simple implementation of the Board class for rendering the Tic-Tac-Toe board and drawing O and X symbols.
 * This class is responsible for drawing the board lines and player symbols (X and O),
 * with customizable colors and other visual properties.
 * 
 * The class supports setting the color of the board and player symbols,
 * and provides methods to draw the X and O symbols at the specified coordinates on the board.
 * 
 * <p>This class extends {@link Board} and relies on the methods defined in 
 * {@link BoardInterface} for game logic and board interaction.</p>
 *
 * @see Board
 * @see BoardInterface
 *
 * <p>javadoc comment generated by ChatGpt but verified by me XD</p>
 *
 * @author [M Reza Dwi Prasetiawan]
 * @version 1.0
 */

public class SimpleBoard extends Board {

    private Paint paint = new Paint();
    private int color;

    /**
     * Constructs a SimpleBoard with default player color set to white.
     *
     * @param context  the context of the application
     * @param sideSize the number of cells along each side of the board
     * @param winSize  the number of consecutive marks needed to win
     */
    public SimpleBoard(Context context, int sideSize, int winSize) {
        super(context, sideSize, winSize);
        this.color = Color.WHITE;
    }

    /**
     * Constructs a SimpleBoard with a specified player.
     *
     * @param context  the context of the application
     * @param sideSize the number of cells along each side of the board
     * @param winSize  the number of consecutive marks needed to win
     * @param player   the current player's mark (O or X)
     */
    public SimpleBoard(Context context, int sideSize, int winSize, byte player) {
        super(context, sideSize, winSize, player);
        this.color = Color.WHITE;
    }

    /**
     * Constructs a SimpleBoard with a specified player and color.
     *
     * @param context  the context of the application
     * @param sideSize the number of cells along each side of the board
     * @param winSize  the number of consecutive marks needed to win
     * @param player   the current player's mark (O or X)
     * @param color    the color for the player symbols
     */
    public SimpleBoard(Context context, int sideSize, int winSize, byte player, int color) {
        this(context, sideSize, winSize, player);
        setColor(color);
    }

    /**
     * Sets the color of the player symbols (O and X).
     *
     * @param color the color value
     */
    public void setColor(int color) {
        this.color = color;
    }

    /**
     * Sets the color of the player symbols using a Color object.
     *
     * @param color the Color object
     */
    public void setColor(Color color) {
        setColor(color.toArgb());
    }

    /**
     * Draws a line on the board between two points.
     *
     * @param canvas the canvas to draw the line on
     * @param x0     the starting x-coordinate
     * @param y0     the starting y-coordinate
     * @param x1     the ending x-coordinate
     * @param y1     the ending y-coordinate
     */
    @Override
    protected void drawBoardLine(Canvas canvas, float x0, float y0, float x1, float y1) {
        canvas.drawLine(x0, y0, x1, y1, paint);
    }

    /**
     * Draws the background of the board.
     * Currently, this method is a placeholder.
     *
     * @param canvas the canvas to draw the background on
     */
    @Override
    protected void drawBackground(Canvas canvas) {
        // TODO: Implement this method
    }

    /**
     * Draws an X symbol at the specified board coordinates.
     *
     * @param canvas the canvas to draw the X on
     * @param x      the x-coordinate of the cell
     * @param y      the y-coordinate of the cell
     */
    protected void drawX(Canvas canvas, int x, int y) {
        float margin = getCellSize() / 5;
        float startX = getOffsetX() + x * getCellSize() + margin;
        float startY = getOffsetY() + y * getCellSize() + margin;
        float endX = getOffsetX() + (x + 1) * getCellSize() - margin;
        float endY = getOffsetY() + (y + 1) * getCellSize() - margin;
        
        paint.setColor(Color.RED);
        paint.setStrokeWidth(8);
        
        // Draw two diagonal lines forming an X
        canvas.drawLine(startX, startY, endX, endY, paint);
        canvas.drawLine(endX, startY, startX, endY, paint);
    }

    /**
     * Draws an O symbol at the specified board coordinates.
     *
     * @param canvas the canvas to draw the O on
     * @param x      the x-coordinate of the cell
     * @param y      the y-coordinate of the cell
     */
    protected void drawO(Canvas canvas, int x, int y) {
        float startX = getOffsetX() + x * getCellSize();
        float startY = getOffsetY() + y * getCellSize();
        
        paint.setColor(Color.BLUE);
        paint.setStrokeWidth(8);
        paint.setStyle(Paint.Style.STROKE);
        
        // Draw a circle in the center of the cell
        canvas.drawCircle(startX + getCellSize() / 2, startY + getCellSize() / 2, getCellSize() / 4f, paint);
    }
}